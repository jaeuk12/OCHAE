<?phpclass Lemon_Request {	var $xss;	var $isAjaxRequest = false;	var $header = "<html><head>	<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" /></head><body>	";	var $footer = "</body></html>";		public function __construct(){		 $this->xssClean();	}		public function setAjax($boolean){		$this->isAjaxRequest = $boolean;	}	public function escapeStr($str) {		$searchArr = array("\'","\"","&","<",">");		$replaceArr = array("'","&quot;","&amp;","&lt;","&gt;");		$str = str_replace($searchArr, $replaceArr, $str);		return $str;	}	public function noAllowWordCheck($str){		if($str!='' && !is_numeric($str)){			if(preg_match("/(insert into|delete from|update .* set|select .* from)/i",$str,$match)!=0){				echo $this->header."<script>alert('허용불가 단어가 포함되어 있습니다');history.back();</script>".$this->footer;				exit;			}		}	}	public function xssClean(){		$this->xss = Lemon_Instance::getObject('Lemon_XSSCleaner');				// GET 인자에 대해서 xss검사를 한다		foreach($_GET as $k => $v){			if(preg_match("/[^a-zA-Z0-9\-\_]/",$k)){				unset($_GET[$k]);				continue;			}			$_GET[$k] = $this->escapeStr($this->xss->run($v));		}		// POST 인자에 대해서 xss검사를 한다		foreach($_POST as $k => $v){			// 배열일 경우 다시 루프를 돌리면서 확인한다.			if(is_array($v)){				foreach($v as $k2 => $v2){					if(trim($v2)!=''){						$v[$k2] = trim($this->xss->run($v2));						$this->noAllowWordCheck($v2);					}				}			}			else{				$v = str_replace("　","",$v);				if(trim($v)!=''){					$v = trim($this->xss->run($v));					$this->noAllowWordCheck($v);				}			}			$_POST[$k] = $v;		}		// SERVER 인자에 대해서 xss검사를 한다		foreach($_SERVER as $k => $v){			$_SERVER[$k] = $this->escapeStr($this->xss->run($v));		}	}	public function setParameter($gets){		foreach($gets as $k=>$v){			$_GET[$k] = $this->escapeStr($this->xss->run($v));		}	}		/**	 * $_REQUEST 에 대한 값 얻기	 * @param String $var - 키값	 * @param String $type - 밸류값에 대한 유효성체크. number / alpha / ko / number_alpha 중에 하나	 * @throws Lemon_ScriptException	 */	public function request($var, $type="", $isNullNotAllow=false){		$func = Lemon_Instance::getObject("Func");		if (isset($_REQUEST[$var])) {			if($_REQUEST[$var]==""){				if($isNullNotAllow){					throw new Lemon_ScriptException("[parameter error] $var 인자값이 잘못되었습니다.");					exit;				}				else					return "";			}			else {				if($type==""){					return $_REQUEST[$var];				}				else {					if($type=="replace" || $type=="replace_allow_html"){						return $func->replaceChar($_REQUEST[$var], $type);					}					else {						$isError = $func->isTypeError($_REQUEST[$var], $type);													if($isError){							if($this->isAjaxRequest){								echo json_encode("param_error");								exit;							}							else{//								if($isNullNotAllow){									throw new Lemon_ScriptException("[parameter error] $var 인자값이 잘못되었습니다.");									exit;/* 								}								else{									return "";								} */							}						}									return $_REQUEST[$var];					}				}			}		}		else if($isNullNotAllow){			throw new Lemon_ScriptException("[parameter error] $var 인자값이 비어있습니다.");			exit;		}		else return '';	}		/**	 * $_GET 에 대한 값 얻기	 * type 이 replace 일 경우 유효성체크가 아닌 특수문자값을 문자표의 대응하는 문자로 전부 치환해버린다.	 * @param String $var - 키값	 * @param String $type - 밸류값에 대한 유효성체크 및 특수문자 치환. number / alpha / ko / number_alpha / replace 중에 하나	 * @throws Lemon_ScriptException	 */	public function get($var, $type="", $isNullNotAllow=false){		$func = Lemon_Instance::getObject("Func");		if (isset($_GET[$var])) {			if($_GET[$var]==""){				if($isNullNotAllow){					if($this->isAjaxRequest){						echo json_encode("param_error");						exit;					}					else {						throw new Lemon_ScriptException("[parameter error] $var 인자값이 잘못되었습니다.");						exit;					}				}				else					return "";			}			else {				if($type==""){					return $_GET[$var];				}				else {					if($type=="replace" || $type=="replace_allow_html"){						return $func->replaceChar($_GET[$var], $type);					}					else {						$isError = $func->isTypeError($_GET[$var], $type);												if($isError){							if($this->isAjaxRequest){								echo json_encode("param_error");								exit;							}							else {//								if($isNullNotAllow){									throw new Lemon_ScriptException("[parameter error] $var 인자값이 잘못되었습니다.");									exit;/* 								}								else{									return "";								} */							}						}							return $_GET[$var];					}				}			}		}		else if($isNullNotAllow){			if($this->isAjaxRequest){				echo json_encode("param_error");				exit;			}			else {				throw new Lemon_ScriptException("[parameter error] $var 인자값이 비어있습니다.");				exit;			}		}		else return '';	}		public function post($var, $type="", $isNullNotAllow=false){		$func = Lemon_Instance::getObject("Func");		if (isset($_POST[$var])) {			if($_POST[$var]==""){				if($isNullNotAllow){					if($this->isAjaxRequest){						echo json_encode("param_error");						exit;					}					else {						throw new Lemon_ScriptException("[parameter error] $var 인자값이 잘못되었습니다.");						exit;					}				}				else					return "";			}			else {				if($type==""){					return $_POST[$var];				}				else {					if($type=="replace" || $type=="replace_allow_html"){						return $func->replaceChar($_POST[$var], $type);					}					else {						$isError = $func->isTypeError($_POST[$var], $type);												if($isError){							if($this->isAjaxRequest){								echo json_encode("param_error");								exit;							}							else {//								if($isNullNotAllow){									throw new Lemon_ScriptException("[parameter error] $var 인자값이 잘못되었습니다.");									exit;/* 								}								else{									return "";								} */							}						}							return $_POST[$var];					}				}			}		}		else if($isNullNotAllow){			if($this->isAjaxRequest){				echo json_encode("param_error");				exit;			}			else {				throw new Lemon_ScriptException("[parameter error] $var 인자값이 비어있습니다.");				exit;			}		}		else return '';	}		public function cookie($var, $type="", $isNullNotAllow=false){		$func = Lemon_Instance::getObject("Func");		if (isset($_COOKIE[$var])) {			if($_COOKIE[$var]==""){				if($isNullNotAllow){					throw new Lemon_ScriptException("[parameter error] $var 인자값이 잘못되었습니다.");					exit;				}				else					return "";			}			else {				if($type==""){					return $_COOKIE[$var];				}				else {					if($type=="replace" || $type=="replace_allow_html"){						return $func->replaceChar($_COOKIE[$var], $type);					}					else {						$isError = $func->isTypeError($_COOKIE[$var], $type);													if($isError){							throw new Lemon_ScriptException("[parameter error] $var 인자값이 잘못되었습니다.");							exit;						}									return $_COOKIE[$var];					}				}			}		}		else if($isNullNotAllow){			throw new Lemon_ScriptException("[parameter error] $var 인자값이 비어있습니다.");			exit;		}		else return '';	}	/**	 * HTML 태그 삭제	 *	 * @param $str 태그 포함 문자열	 * @return 문자열	 */	public function get_strip_tags($str) {		$tags = array(						"html", "head", "body", "title", "h1", "h2", "h3", "h4", "h5",						"p", "br", "pre", "font", "hr", "img", "map", "ul", "ol", "menu",						"dir", "dl", "center", "blockquote", "strong", "b", "em", "embed",						"i", "kbd", "code", "tt", "body", "dfn", "cite", "samp", "var", "sub",						"sup", "basepoint", "blink", "u", "a", "address", "table", "tr", "td",						"nobr", "wbr", "form", "textarea", "input", "frameset", "noframes", "frame",						"img", "div", "tbody", "span", "link", "script", "tont", "object", "param",						"area", "iframe", "meta", "script", "style", "!embed", "li", "select",						"marquee"					);		// 주석 제거		$str = preg_replace("/<!--[\w\W]*-->/U","",$str);		// 스크립트 제거		$str = preg_replace("/<script [\w\W]+<\/script>/iU","",$str);		if (preg_match_all("/<[\/]*([^>]*)[\/]*>/", $str, $match)) {			for($i=0;$i<sizeof($match[1]);$i++){				// 매치된 태그에 대해 공백 구분으로 나눈다 ex. font color='red'				$tmp = explode(" ",$match[1][$i]);				if (in_array(strtolower($tmp[0]),$tags)) {		// 태그어인지 검사					if ($allow!="") {						if (!in_array(strtolower($tmp[0]),$allow)) {	// 허용태그에 포함안된 태그이면 제거							$str = preg_replace("/<[\/]*".$tmp[0]."[^>]*[\/]*>/i","", $str);						}					} else {						$str = preg_replace("/<[\/]*".$tmp[0]."[^>]*[\/]*>/i","",$str);					}				}			}		}		// &nbsp;, 2byte 공백문자 제거. 공백여러개는 공백한개로		$str = str_replace(array("&nbsp;","　"), array(" "," "), $str);		// 공백 문자 여러개 제거		$str = preg_replace("/[ ]+/"," ",$str);		// 공백제거후 리턴		return trim($str);	}}?>